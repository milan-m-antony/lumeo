-- Create the 'albums' table
create table if not exists public.albums (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users(id) on delete cascade not null default auth.uid(),
    name text not null,
    description text,
    created_at timestamp with time zone not null default now()
);
-- Enable RLS
alter table public.albums enable row level security;
-- Create policy for users to manage their own albums
create policy "Users can manage their own albums" on public.albums for all
    using (auth.uid() = user_id)
    with check (auth.uid() = user_id);
-- Create the 'files' table
create table if not exists public.files (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users(id) on delete cascade not null default auth.uid(),
    file_id text not null,
    thumbnail_file_id text,
    tg_message_id bigint not null,
    caption text,
    type text not null,
    file_size integer,
    deleted_at timestamp with time zone,
    created_at timestamp with time zone not null default now()
);
-- Enable RLS
alter table public.files enable row level security;
-- Create policy for users to manage their own files
create policy "Users can manage their own files" on public.files for all
    using (auth.uid() = user_id)
    with check (auth.uid() = user_id);
-- Create the 'file_album_links' table (junction table)
create table if not exists public.file_album_links (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users(id) on delete cascade not null default auth.uid(),
    file_id bigint references public.files(id) on delete cascade not null,
    album_id bigint references public.albums(id) on delete cascade not null,
    created_at timestamp with time zone not null default now(),
    unique(file_id, album_id)
);
-- Enable RLS
alter table public.file_album_links enable row level security;
-- Create policy for users to manage their own links
create policy "Users can manage their own file-album links" on public.file_album_links for all
    using (auth.uid() = user_id)
    with check (auth.uid() = user_id);
-- Function to get the total number of users
create or replace function get_users_count()
returns integer as $$
declare
  user_count integer;
begin
  select count(*) into user_count from auth.users;
  return user_count;
end;
$$ language plpgsql security definer;
-- Grant execute permission to the authenticated role
grant execute on function get_users_count() to authenticated;
-- Function to get database size
create or replace function get_database_size()
returns bigint as $$
  select pg_database_size(current_database());
$$ language sql security definer;
-- Grant execute permission to the authenticated role
grant execute on function get_database_size() to authenticated;

-- Drop existing tables in reverse order of creation due to dependencies
DROP TABLE IF EXISTS public.file_album_links;
DROP TABLE IF EXISTS public.files;
DROP TABLE IF EXISTS public.albums;

-- Create the albums table
CREATE TABLE public.albums (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  name TEXT NOT NULL,
  description TEXT
);

-- Create the files table
CREATE TABLE public.files (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  file_id TEXT NOT NULL,
  caption TEXT,
  type TEXT NOT NULL,
  tg_message_id BIGINT NOT NULL,
  thumbnail_file_id TEXT,
  deleted_at TIMESTAMPTZ,
  file_size BIGINT
);

-- Create the junction table for the many-to-many relationship
CREATE TABLE public.file_album_links (
    file_id BIGINT NOT NULL REFERENCES public.files(id) ON DELETE CASCADE,
    album_id BIGINT NOT NULL REFERENCES public.albums(id) ON DELETE CASCADE,
    PRIMARY KEY (file_id, album_id)
);

-- Enable Row Level Security for albums
ALTER TABLE public.albums ENABLE ROW LEVEL SECURITY;

-- Create policies for public access on albums
CREATE POLICY "Allow public read access for albums" ON public.albums FOR SELECT USING (true);
CREATE POLICY "Allow public insert access for albums" ON public.albums FOR INSERT WITH CHECK (true);
CREATE POLICY "Allow public update access for albums" ON publicalbums FOR UPDATE USING (true);
CREATE POLICY "Allow public delete access for albums" ON public.albums FOR DELETE USING (true);

-- Enable Row Level Security for files
ALTER TABLE public.files ENABLE ROW LEVEL SECURITY;

-- Create policies for public access on files
CREATE POLICY "Allow public read access for files" ON public.files FOR SELECT USING (true);
CREATE POLICY "Allow public insert access for files" ON public.files FOR INSERT WITH CHECK (true);
CREATE POLICY "Allow public update access for files" ON public.files FOR UPDATE USING (true);
CREATE POLICY "Allow public delete access for files" ON public.files FOR DELETE USING (true);

-- Enable Row Level Security for the link table
ALTER TABLE public.file_album_links ENABLE ROW LEVEL SECURITY;

-- Create policies for public access on the link table
CREATE POLICY "Allow public read for file_album_links" ON public.file_album_links FOR SELECT USING (true);
CREATE POLICY "Allow public insert for file_album_links" ON public.file_album_links FOR INSERT WITH CHECK (true);
CREATE POLICY "Allow public delete for file_album_links" ON public.file_album_links FOR DELETE USING (true);

-- Create function to get database size
CREATE OR REPLACE FUNCTION get_database_size()
RETURNS BIGINT AS $$
  SELECT sum(pg_total_relation_size(quote_ident(schemaname) || '.' || quote_ident(tablename)))::BIGINT 
  FROM pg_tables 
  WHERE schemaname = 'public';
$$ LANGUAGE SQL;

-- Create function to get user count for single-user check
create or replace function get_users_count()
returns integer as $$
declare
  user_count integer;
begin
  select count(*) into user_count from auth.users;
  return user_count;
end;
$$ language plpgsql security definer;

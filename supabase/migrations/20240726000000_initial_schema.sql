-- Create the 'albums' table
CREATE TABLE IF NOT EXISTS public.albums (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    name text NOT NULL,
    description text,
    user_id uuid NOT NULL DEFAULT auth.uid(),
    CONSTRAINT albums_pkey PRIMARY KEY (id),
    CONSTRAINT albums_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE CASCADE
);
ALTER TABLE public.albums ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can see their own albums" ON public.albums FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can insert their own albums" ON public.albums FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own albums" ON public.albums FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own albums" ON public.albums FOR DELETE USING (auth.uid() = user_id);


-- Create the 'files' table
CREATE TABLE IF NOT EXISTS public.files (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    user_id uuid NOT NULL DEFAULT auth.uid(),
    file_id text NOT NULL,
    tg_message_id bigint NOT NULL,
    type text NOT NULL,
    caption text,
    deleted_at timestamp with time zone,
    thumbnail_file_id text,
    file_size bigint,
    CONSTRAINT files_pkey PRIMARY KEY (id),
    CONSTRAINT files_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE CASCADE
);
ALTER TABLE public.files ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can see their own files" ON public.files FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can insert their own files" ON public.files FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own files" ON public.files FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own files" ON public.files FOR DELETE USING (auth.uid() = user_id);


-- Create the 'file_album_links' table
CREATE TABLE IF NOT EXISTS public.file_album_links (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    file_id bigint NOT NULL,
    album_id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    user_id uuid NOT NULL DEFAULT auth.uid(),
    CONSTRAINT file_album_links_pkey PRIMARY KEY (id),
    CONSTRAINT file_album_links_album_id_fkey FOREIGN KEY (album_id) REFERENCES public.albums (id) ON DELETE CASCADE,
    CONSTRAINT file_album_links_file_id_fkey FOREIGN KEY (file_id) REFERENCES public.files (id) ON DELETE CASCADE,
    CONSTRAINT file_album_links_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE CASCADE,
    CONSTRAINT file_album_links_file_id_album_id_key UNIQUE (file_id, album_id)
);
ALTER TABLE public.file_album_links ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can see their own file-album links" ON public.file_album_links FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can insert their own file-album links" ON public.file_album_links FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own file-album links" ON public.file_album_links FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own file-album links" ON public.file_album_links FOR DELETE USING (auth.uid() = user_id);

-- RPC function to get database size
CREATE OR REPLACE FUNCTION get_database_size()
RETURNS bigint AS $$
  SELECT sum(pg_database_size(datname))::bigint FROM pg_database;
$$ LANGUAGE sql;

-- RPC function to get user count
CREATE OR REPLACE FUNCTION get_users_count()
RETURNS bigint AS $$
  SELECT count(*) FROM auth.users;
$$ LANGUAGE sql security definer;

-- Grant usage on schema to postgres user
GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO service_role;

-- Grant permissions to postgres user
GRANT ALL ON ALL TABLES IN SCHEMA public TO postgres;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO postgres;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO postgres;

-- Grant permissions to service_role
GRANT ALL ON ALL TABLES IN SCHEMA public TO service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO service_role;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO service_role;

-- Grant execute on functions to authenticated role
GRANT EXECUTE ON FUNCTION public.get_database_size() TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_users_count() TO authenticated;
